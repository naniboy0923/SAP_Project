*&---------------------------------------------------------------------*
*& Include          Z27R0006F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form SET_INSTANCE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_instance .


*MAIN SCREEN
CREATE OBJECT go_docking
  EXPORTING
    side                        = go_docking->dock_at_left
    extension                   = cl_gui_docking_container=>ws_maximizebox.

*SPLITTER
CREATE OBJECT go_splitter
  EXPORTING
    parent            = go_docking
    rows              = 1
    columns           = 2.

*CONTAINER 할당
CALL METHOD go_splitter->get_container
  EXPORTING
    row    = 1
    column = 1
  RECEIVING
    container = go_cont1.
*****너비 조절
  CALL METHOD go_splitter->set_column_width
    EXPORTING
      id                = 1
      width             = 45.


CALL METHOD go_splitter->get_container
  EXPORTING
    row    = 1
    column = 2
  RECEIVING
    container = go_cont2.


*ALV
CREATE OBJECT go_grid1
  EXPORTING
    i_parent          = go_cont1.

CREATE OBJECT go_grid2
  EXPORTING
    i_parent          = go_cont2.




ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_ALV
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_alv .

*LEFT ALV
CALL METHOD go_grid1->set_table_for_first_display
  EXPORTING
    is_layout                     = gs_layo
*    IS_TOOLBAR_EXCLUDING          = GT_TOOLBAR
  CHANGING
    it_outtab                     = gt_disp1
    it_fieldcatalog               = gt_fieldcat1
    it_sort                       = gt_sort.

*RIGHT ALV
CALL METHOD go_grid2->set_table_for_first_display
  EXPORTING
    is_layout                     = gs_layo2
  CHANGING
    it_outtab                     = gt_disp2
    it_fieldcatalog               = gt_fieldcat2.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_FIELDCAT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_fieldcat .

*위쪽 ALV
CLEAR gt_fieldcat1.

PERFORM get_fcat USING 'VBELN' 'SO번호' 'X' 'X' ''.
PERFORM get_fcat USING 'BANFN' 'PR번호' '' '' ''.
PERFORM get_fcat USING 'POSNR' 'ITEM No.' '' 'X' ''.
PERFORM get_fcat USING 'AUDAT' 'SO등록일자' '' '' ''.
PERFORM get_fcat USING 'MATNR' '자재번호' '' '' ''.
PERFORM GET_FCAT USING 'ARKTX' '자재설명' '' '' ''.
PERFORM get_fcat USING 'KWMENG' '수량' '' '' ''.
PERFORM get_fcat USING 'VRKME' '단위' '' '' ''.
PERFORM get_fcat USING 'KUNNR' '고객사' '' '' ''.
PERFORM get_fcat USING 'BSTNK' '업체 PO번호' '' '' ''.
PERFORM get_fcat USING 'ERNAM' 'PR생성자' '' '' ''.
PERFORM get_fcat USING 'ERDAT' 'PR생성일' '' '' ''.
*PERFORM get_fcat USING 'ERNAM1' 'PR생성자' '' '' ''.


*아래쪽 ALV
CLEAR gt_fieldcat2.

PERFORM get_fcat2 USING 'ICON' '상태' '' '' '' '' ''.
PERFORM get_fcat2 USING 'MATNR' '자재번호' '' '' '' 'X' ''.
PERFORM GET_FCAT2 USING 'TXZ01' '자재설명' '' '' '' '' ''.
PERFORM GET_FCAT2 USING 'TMTNR' '상위자재' '' '' '' '' ''.
PERFORM GET_FCAT2 USING 'VBELN' 'SO번호' '' '' '' '' ''.
PERFORM get_fcat2 USING 'MENGE' '수량' 'X' '' '' '' ''.
PERFORM get_fcat2 USING 'MEINS' '단위' '' '' '' '' ''.
PERFORM get_fcat2 USING 'BADAT' '배송일자' 'X' '' '' '' ''.
PERFORM get_fcat2 USING 'WERKS' 'PLANT' 'X' 'EBAN' '' '' ''.
PERFORM get_fcat2 USING 'EKGRP' 'Pur.Grp' 'X' 'EBAN' '' '' ''.
PERFORM get_fcat2 USING 'ICON2' '재고상태' '' '' '' '' 'C300'.
PERFORM get_fcat2 USING 'LABST' '현 재고' '' '' '' '' 'C300'.
PERFORM get_fcat2 USING 'LFMON' '주문 재고' '' '' '' '' 'C300'.
PERFORM get_fcat2 USING 'TOTAL' '총 재고' '' '' '' '' 'C300'.
PERFORM GET_FCAT2 USING 'EISBE' '안전 재고' '' '' '' '' 'C300'.
PERFORM get_fcat2 USING 'PRNUM' 'PR 번호' '' '' 'X' '' ''.
PERFORM get_fcat2 USING 'MESGE' 'PR생성 결과' '' '' '' '' ''.




ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_FCAT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&      --> P_
*&---------------------------------------------------------------------*
FORM get_fcat  USING    VALUE(p_NAME)
                        VALUE(p_TEXT)
                        VALUE(P_HSPOT)
                        VALUE(P_KEY)
                        VALUE(P_COLOR).

CLEAR gs_fieldcat1.
gs_fieldcat1-fieldname = p_name.
gs_fieldcat1-coltext   = p_text.
GS_fIELDCAT1-HOTSPOT   = P_HSPOT.
GS_FIELDCAT1-KEY       = P_KEY.
GS_FIELDCAT1-EMPHASIZE = P_COLOR.
APPEND gs_fieldcat1 TO gt_fieldcat1.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_FCAT2
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&      --> P_
*&---------------------------------------------------------------------*
FORM get_fcat2  USING    VALUE(p_NAME)
                         VALUE(p_TEXT)
                         VALUE(P_EDIT)
                         VALUE(P_REFF)
                         VALUE(P_HSPOT)
                         VALUE(P_KEY)
                         VALUE(P_COLOR).

CLEAR gs_fieldcat2.
gs_fieldcat2-fieldname = p_name.
gs_fieldcat2-coltext   = p_text.
GS_fIELDCAT2-EDIT      = P_EDIT.
GS_FIELDCAT2-REF_TABLE = P_REFF.
GS_FIELDCAT2-HOTSPOT   = P_HSPOT.
GS_FIELDCAT2-KEY       = P_KEY.
GS_FIELDCAT2-EMPHASIZE = P_COLOR.
APPEND gs_fieldcat2 TO gt_fieldcat2.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_ALL
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_all .

SELECT K~VBELN P~POSNR K~AUDAT P~MATNR P~ARKTX P~KWMENG P~VRKME K~KUNNR K~BSTNK K~ERNAM "E~BANFN E~ERNAM E~BADAT
  FROM VBAP AS P INNER JOIN VBAK AS K
       ON P~VBELN = K~VBELN
*                 INNER JOIN EBAN AS E
*       ON P~MATNR = E~MATNR

  INTO CORRESPONDING FIELDS OF TABLE gt_disp1
  WHERE K~vbeln IN s_vbeln AND
        P~matnr IN s_matnr AND
        K~AUDAT IN S_AUDAT AND
        K~KUNNR IN s_patnr AND
        K~BSTNK IN S_BSTNK AND
        K~ERNAM IN S_ERNAM.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_OPEN
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_open .

SELECT K~VBELN, P~POSNR, K~AUDAT, P~MATNR, P~ARKTX, P~KWMENG, P~VRKME, K~KUNNR, K~BSTNK "Z~BANFN, Z~ERNAM, Z~ERDAT

  FROM VBAK AS K LEFT JOIN ZSO_MANAGE AS Z ON K~VBELN = Z~VBELN
                 LEFT JOIN VBAP AS P ON K~VBELN = P~VBELN


  INTO CORRESPONDING FIELDS OF TABLE @GT_DISP1

  WHERE Z~BANFN IS NULL AND
        K~vbeln IN @s_vbeln AND
        P~matnr IN @s_matnr AND
        K~AUDAT IN @S_AUDAT AND
        K~KUNNR IN @s_patnr AND
        K~BSTNK IN @S_BSTNK AND
        K~ERNAM IN @S_ERNAM.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_EVENT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_event .


CREATE OBJECT GO_EVENT_RECEIVER.

SET HANDLER GO_EVENT_RECEIVER->HANDLE_DATA_CHANGED FOR GO_GRID2.
SET HANDLER GO_EVENT_RECEIVER->HANDLE_HOTSPOT_CLICK FOR GO_GRID1.
SET HANDLER GO_EVENT_RECEIVER->HANDLE_HOTSPOT_CLICK FOR GO_GRID2.
SET HANDLER GO_EVENT_RECEIVER->HANDLE_TOOLBAR FOR GO_GRID2.
SET HANDLER GO_EVENT_RECEIVER->HANDLE_USER_COMMAND FOR GO_GRID2.

*EVENT 자체가 발생했는지?
CALL METHOD go_grid2->register_edit_event
  EXPORTING
    i_event_id = GO_GRID2->MC_EVT_MODIFIED
        .
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.




ENDFORM.
*&---------------------------------------------------------------------*
*& Form HANDLE_DOUBLE_CLICK
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_ROW
*&      --> E_COLUMN
*&---------------------------------------------------------------------*
FORM handle_double_click  USING    p_row TYPE LVC_S_ROW
                                   p_col TYPE LVC_S_COL.

*CLEAR GS_DISP2.
*
**더블클릭한 ROW
*READ TABLE GT_DISP2 INTO GS_DISP2 INDEX P_ROW-index.
*
**해당 내용들 가져오기
*SELECT WERKS MATNR LABST
*  INTO CORRESPONDING FIELDS OF TABLE GT_DISP_02
*  FROM MARD
*  WHERE MATNR = GS_DISP2-MATNR.
*
**screen 띄우기
*  CALL SCREEN '0200' STARTING AT 10 10.






ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_CLOSE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_close .

SELECT K~VBELN, P~POSNR, K~AUDAT, P~MATNR, P~ARKTX, P~KWMENG, P~VRKME, K~KUNNR, K~BSTNK,Z~BANFN, Z~ERNAM, Z~ERDAT", BANFN, BADAT(PR정보)

  FROM VBAK AS K LEFT JOIN ZSO_MANAGE AS Z ON K~VBELN = Z~VBELN
                 LEFT JOIN VBAP AS P ON K~VBELN = P~VBELN
                 "LEFT JOIN EBAN AS E ON K~

  INTO CORRESPONDING FIELDS OF TABLE @GT_DISP1

  WHERE Z~BANFN IS NOT NULL AND
        K~vbeln IN @s_vbeln AND
        P~matnr IN @s_matnr AND
        K~AUDAT IN @S_AUDAT AND
        K~KUNNR IN @s_patnr AND
        K~BSTNK IN @S_BSTNK AND
        K~ERNAM IN @S_ERNAM.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_LAYOUT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_layout .

CLEAR gs_layo.
gs_layo-zebra = 'X'.
gs_layo-cwidth_opt = 'A'.
gs_layo-no_rowins = 'X'.
gs_layo-grid_title = '판매 오더 조회'.
gs_layo-sel_mode = 'D'.

CLEAR GS_LAYO2.
GS_LAYO2-ZEBRA = 'X'.
gs_layo2-cwidth_opt = 'A'.
*gs_layo2-no_rowins = 'X'.
gs_layo2-grid_title = '소요량 계산 및 구매요청 생성'.
gs_layo2-sel_mode = 'D'.



ENDFORM.
*&---------------------------------------------------------------------*
*& Form CALC_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM calc_data .

CLEAR GT_DISP2.

*선택한 줄 확인
  PERFORM SEL_ROWS1.

*선택한 줄 상대로 LOOP문
  LOOP AT  gt_rows1 INTO gs_rows1.
    READ TABLE gt_disp1 INTO gs_disp1 INDEX gs_rows1-index.

*BAPI-"CS_BOM_EXPLOSION"
  PERFORM BAPI_BOM_EXPL.


  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form REFRESH_ALV
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM refresh_alv .
  DATA : LS_STABLE TYPE LVC_S_STBL.

  LS_STABLE-ROW = 'X'.
  LS_STABLE-COL = 'X'.

  CALL METHOD GO_GRID2->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = LS_STABLE.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_PR
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_pr .


*선택한 ROW 확인
  PERFORM SEL_ROWS.

*데이터 유효성 검증(필수값 유무, 잘못된 값)
  PERFORM CHECK_DATA.

*BAPI-"PR_CREATE"
  PERFORM BAPI_PR_CREATE.




ENDFORM.
*&---------------------------------------------------------------------*
*& Form HANDLE_DATA_CHANGED
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> ER_DATA_CHANGED
*&---------------------------------------------------------------------*
FORM handle_data_changed  USING       ER_data_changed
                          TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.
ENDFORM.
*&---------------------------------------------------------------------*
FORM bapi_pr_create .
DATA: LV_PRNUM   TYPE BAPIMEREQHEADER-PREQ_NO.
DATA: LT_RETURN  LIKE TABLE OF BAPIRET2 WITH HEADER LINE,
      LS_RETURN  LIKE BAPIRET2.
DATA : S_HEADER  LIKE BAPIMEREQHEADER. "OCCURS 0 WITH HEADER LINE.
DATA : S_HEADERX LIKE BAPIMEREQHEADERX. "OCCURS 0 WITH HEADER LINE.
DATA : S_ITEM    LIKE BAPIMEREQITEMIMP OCCURS 0 WITH HEADER LINE.
DATA : S_ITEM_T  LIKE BAPIMEREQITEMIMP OCCURS 0 WITH HEADER LINE.
DATA : S_ITEMX   LIKE BAPIMEREQITEMX OCCURS 0 WITH HEADER LINE.
DATA LV_ITEMNUM TYPE I.
DATA: LS_DATA LIKE ZSO_MANAGE.
DATA : LT_DATA LIKE TABLE OF LS_DATA.
DATA : LT_DISP2 LIKE TABLE OF GS_DISP2.
DATA : LS_DISP2 LIKE GS_DISP2.
CLEAR LS_DATA.
CLEAR LS_RETURN.

CLEAR LT_DISP2.
LOOP AT GT_ROWS2 INTO GS_ROWS2.
  READ TABLE gt_disp2 INTO gs_disp2 INDEX gs_rows2-index.
  APPEND GS_DISP2 TO LT_DISP2.
ENDLOOP.

SORT LT_DISP2 BY MATNR.


LOOP AT LT_DISP2 INTO LS_DISP2.
******************************************************************HEADER 입력
S_HEADER-PR_TYPE  = 'NB'.
S_HEADERX-PR_TYPE = 'X'.

******************************************************************ITEM 입력
GS_DISP2 = LS_DISP2.   "LS_DISP2가 SUM된 값을 가지고 있다.
AT NEW MATNR.          "MATNR이 바뀔 때마다 처리
  SUM.                 "MATNR이 바뀔 때마다 번호가 같은 애들끼리 수량과 금액 SUM

ADD 10 TO LV_ITEMNUM.
S_ITEM-PREQ_ITEM  = LV_ITEMNUM.       "아이템 넘버
S_ITEM-MATERIAL   = GS_DISP2-MATNR.   "자재코드
S_ITEM-PLANT      = GS_DISP2-WERKS.   "플랜트 : 1010 입력
S_ITEM-QUANTITY   = LS_DISP2-MENGE.   "수량
S_ITEM-UNIT       = GS_DISP2-MEINS.   "단위
S_ITEM-PUR_GROUP  = GS_DISP2-EKGRP.   "구매그룹 : SGZ 입력
S_ITEM-DELIV_DATE = GS_DISP2-BADAT.   "배송날짜(입력 안해도 정상 수행)
S_ITEM-PREQ_PRICE = '1'.              "VALIDATION PRICE
APPEND S_ITEM.
S_ITEMX-PREQ_ITEM  = LV_ITEMNUM.      "아이템넘버
S_ITEMX-PREQ_ITEMX  = 'X'.            "아이템넘버
S_ITEMX-MATERIAL   = 'X'.             "자재코드
S_ITEMX-PLANT      = 'X'.             "플랜트
S_ITEMX-QUANTITY   = 'X'.             "수량
S_ITEMX-UNIT       = 'X'.             "단위
S_ITEMX-PUR_GROUP  = 'X'.             "구매그룹
S_ITEMX-DELIV_DATE = 'X'.             "배송날짜
S_ITEMX-PREQ_PRICE = 'X'.             "VALIDATION PRICE
APPEND S_ITEMX.
ENDAT.
ENDLOOP.

*****************************************************************BAPI 수행
CALL FUNCTION 'BAPI_PR_CREATE'
 EXPORTING
   PRHEADER                      = S_HEADER
   PRHEADERX                     = S_HEADERX
 IMPORTING
   NUMBER                        = LV_PRNUM        "PR NUMBER
  TABLES
   RETURN                        = LT_RETURN       "결과값 TABLE
    PRITEM                       = S_ITEM
   PRITEMX                       = S_ITEMX.
*****************************************************************성공 유무 확인.
  CLEAR GS_DISP2.
  READ TABLE LT_RETURN INTO LS_RETURN WITH KEY TYPE = 'E'.

  IF SY-SUBRC = 0.
    "오류처리
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    READ TABLE LT_RETURN INTO LS_RETURN WITH KEY type = 'E'      "LT_RETURN = 오류 메세지
                                                 id   = 'ME'.
    LOOP AT GT_ROWS2 INTO GS_ROWS2.                                "PR생성하려고 선택한 ROWS들 LOOP문
      READ TABLE GT_DISP2 INTO GS_DISP2 INDEX gs_rows2-index.
      GS_DISP2-ICON  = ICON_LED_RED.                             "오류 아이콘 처리
      IF LS_RETURN-message_v2 = GS_DISP2-MATNR.
         GS_DISP2-MESGE = LS_RETURN-message.                     "오류 메시지 처리
      ENDIF.
      MODIFY GT_DISP2 FROM GS_DISP2 INDEX GS_ROWS2-INDEX.         "ALV에 띄우기
    ENDLOOP.
    MESSAGE S003 DISPLAY LIKE 'E'. "PR생성에 실패하였습니다.

  ELSE.
GV_PRNUM = LV_PRNUM. "PR번호를 전역변수에
PERFORM BAPI_COMMIT. "성공처리 로직

*********ZSO 테이블에 입력**********************************************
  LS_DATA-MANDT = SY-MANDT.
  LS_DATA-banfn = LV_PRNUM.                             "PR번호 LS_DATA로 입력
  LS_DATA-ERNAM = SY-UNAME.
  LS_DATA-ERDAT = SY-DATUM.
  LS_DATA-ERZET = SY-UZEIT.

  LOOP AT  gt_rows2 INTO gs_rows2.                        "SO번호 LS_DATA로 입력
    READ TABLE gt_disp2 INTO gs_disp2 INDEX gs_rows2-index.
    LS_DATA-vbeln = GS_DISP2-VBELN.
    APPEND LS_DATA TO LT_DATA.                        "LT_DATA에 현재 PR 생성된 PRNUM과 SONUM 추가
  ENDLOOP.

  INSERT ZSO_MANAGE FROM TABLE LT_DATA ACCEPTING DUPLICATE KEYS.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form SEL_ROWS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM sel_rows .

CLEAR GS_ROWS2.
CALL METHOD go_grid2->get_selected_rows
IMPORTING
  et_index_rows = gt_rows2.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form TYPE_CHECK
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM type_check .

DATA: LT_RETURN LIKE TABLE OF BAPIRET2 WITH HEADER LINE,
      LS_RETURN LIKE BAPIRET2.

IF LS_RETURN-TYPE = 'E'.
  "오류처리
CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
MESSAGE S003 DISPLAY LIKE 'E'.
ELSE.
  "성공처리
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
   EXPORTING
     WAIT = 'X'.
  MESSAGE S002.
ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_INSTANCE_002
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_instance_002 .

CREATE OBJECT go_cont3
  EXPORTING
    container_name              = 'GO_CONT3'.

CREATE OBJECT go_grid3
  EXPORTING
    i_parent          = GO_CONT3.





ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_FIELDCAT_002
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_fieldcat_002 .

CLEAR GS_FIELDCAT3.
GS_FIELDCAT3-FIELDNAME = 'WERKS'.
GS_FIELDCAT3-COLTEXT = '플랜트'.
APPEND GS_FIELDCAT3 TO GT_FIELDCAT3.


CLEAR GS_FIELDCAT3.
GS_FIELDCAT3-FIELDNAME = 'MATNR'.
GS_FIELDCAT3-COLTEXT = '자재'.
APPEND GS_FIELDCAT3 TO GT_FIELDCAT3.

CLEAR GS_FIELDCAT3.
GS_FIELDCAT3-FIELDNAME = 'LABST'.
GS_FIELDCAT3-COLTEXT = '현 재고'.
APPEND GS_FIELDCAT3 TO GT_FIELDCAT3.

CLEAR GS_FIELDCAT3.
GS_FIELDCAT3-FIELDNAME = 'UMLME'.
GS_FIELDCAT3-COLTEXT = '주문재고'.
APPEND GS_FIELDCAT3 TO GT_FIELDCAT3.

CLEAR GS_FIELDCAT3.
GS_FIELDCAT3-FIELDNAME = 'TOTAL'.
GS_FIELDCAT3-COLTEXT = '총 재고'.
APPEND GS_FIELDCAT3 TO GT_FIELDCAT3.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_ALV_002
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_alv_002 .
*CALL METHOD go_grid3->set_table_for_first_display
**  EXPORTING
**    is_layout                     =
*  CHANGING
*    it_outtab                     = GT_DISP_02
*    it_fieldcatalog               = GT_FIELDCAT3.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form REFRESH_ALV_002
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM refresh_alv_002 .

  DATA : LS_STABLE TYPE LVC_S_STBL.

  LS_STABLE-ROW = 'X'.
  LS_STABLE-COL = 'X'.

  CALL METHOD GO_GRID3->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = LS_STABLE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form SEL_ROWS1
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM sel_rows1 .

  CALL METHOD go_grid1->get_selected_rows
  IMPORTING
    et_index_rows = gt_rows1.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_BAPI
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_bapi .


ENDFORM.
*&---------------------------------------------------------------------*
*& Form BAPI_BOM_EXPL
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM bapi_bom_expl .
DATA : IT_STB  LIKE TABLE OF STPOX,
       IS_STB  LIKE STPOX,
       IT_MCAT LIKE TABLE OF CSCMAT.
DATA : LT_DATA_P LIKE TABLE OF GT_DATA_P WITH HEADER LINE,
       LT_DATA_B LIKE TABLE OF GT_DATA_B WITH HEADER LINE.
DATA : LS_DATA_P LIKE GS_DATA_P,
       LS_DATA_B LIKE GS_dATA_B.
DATA : LV_DATA TYPE BSTMG.
DATA : BEGIN OF LS_DATA,
       MATNR TYPE MAKT-MATNR, LABST TYPE MARD-LABST, EISBE TYPE MARC-EISBE,
       END OF LS_DATA.
DATA : LT_DATA LIKE TABLE OF LS_DATA.
DATA : LV_EMENG TYPE STKO-BMENG.
lv_EMENG = GS_DISP1-KWMENG.

CALL FUNCTION 'CS_BOM_EXPL_MAT_V2'
 EXPORTING
   CAPID                       = 'PP01'
   DATUV                       = sy-datum
   EMENG                       = LV_EMENG
   MKTLS                       = 'X'
   MEHRS                       = 'X'
   MTNRV                       = GS_DISP1-MATNR
   SVWVO                       = 'X'
   WERKS                       = '1010'
   VRSVO                       = 'X'
  TABLES
    stb                         = IT_STB
   MATCAT                       = IT_MCAT
 EXCEPTIONS
   ALT_NOT_FOUND               = 1
   CALL_INVALID                = 2
   MATERIAL_NOT_FOUND          = 3
   MISSING_AUTHORIZATION       = 4
   NO_BOM_FOUND                = 5
   NO_PLANT_DATA               = 6
   NO_SUITABLE_BOM_FOUND       = 7
   CONVERSION_ERROR            = 8
   OTHERS                      = 9.
IF sy-subrc = 0.
PERFORM CS_BOM_EXPL.
*******BOM 계산량 -> ALV*************************************************************
CLEAR GS_DISP2.
LOOP AT IT_STB INTO IS_STB.
  IF IS_STB-MTART <> 'ROH'.
    CONTINUE.
  ELSE.
    MOVE-CORRESPONDING IS_STB TO GS_DISP2.
    GS_DISP2-TXZ01 = IS_STB-OJTXP.   "자재설명
    GS_DISP2-MENGE = IS_STB-MNGLG.   "BOM 수량
    GS_DISP2-TMTNR = GS_DISP1-matnr. "상위자재
    GS_DISP2-MATNR = IS_STB-IDNRK.   "자재명
    GS_DISP2-VBELN = GS_DISP1-VBELN. "SO번호

*******현 재고 불러오기***********************************************************
    clear ls_data.
    select MATNR LABST
      from MARD
      INTO CORRESPONDING FIELDS OF LS_DATA
      WHERE MATNR = IS_STB-IDNRK.
      GS_DISP2-LABST = LS_DATA-LABST. "재고 / 현재 1개의 창고 재고만 불러오는데, 6조는 창고릃 하나만 쓰기 때문에 아직 합계는 구현하지 않은 상태임.

*******주문재고-PO 물량 합계**************************************************
    SELECT MATNR WERKS MENGE
    FROM EKPO
    INTO CORRESPONDING FIELDS OF TABLE GT_DATA_P
    WHERE MATNR = IS_STB-IDNRK.   "LOOP돌고있는 IS_STBP의 자재명

    SORT GT_DATA_P.
      LOOP AT GT_DATA_P.
        COLLECT GT_DATA_P INTO LT_DATA_P.
      ENDLOOP.
*******주문재고-GR 물량 합계********************************************************
    SELECT MATNR WERKS MENGE
    FROM EKBE
    INTO CORRESPONDING FIELDS OF TABLE GT_DATA_B
    WHERE MATNR = IS_STB-IDNRK.   "LOOP돌고있는 IS_STBP의 자재명
    ENDSELECT.

    SORT GT_DATA_B.
      LOOP AT GT_DATA_B.
        COLLECT GT_DATA_B INTO LT_DATA_B.
      ENDLOOP.
********주문재고 구현(PO물량-GR물량)********************************************************
    READ TABLE LT_DATA_P INTO LS_DATA_P INDEX 1.
    READ TABLE LT_DATA_B INTO LS_DATA_B INDEX 1.
    LV_DATA = LS_DATA_P-menge - LS_DATA_B-MENGE.
    GS_DISP2-LFMON = LV_DATA.
********총 물량(현재고+주문재고)***********************************************************
    GS_DISP2-TOTAL = GS_DISP2-labst + GS_DISP2-LFMON.
********안전 재고***********************************************************************
    SELECT MATNR EISBE
    FROM MARC
    INTO CORRESPONDING FIELDS OF GS_DATA
    WHERE MATNR = IS_STB-IDNRK.
    GS_DISP2-EISBE = GS_DATA-EISBE.
    ENDSELECT.
********재고 상태***********************************************************************
      IF GS_DISP2-TOTAL = GS_DISP2-EISBE.
        GS_DISP2-ICON2  = ICON_YELLOW_LIGHT.
      ELSEIF GS_DISP2-TOTAL > GS_DISP2-EISBE.
        GS_DISP2-ICON2  = ICON_GREEN_LIGHT.
      ELSEIF GS_DISP2-TOTAL < GS_DISP2-EISBE.
        GS_DISP2-ICON2  = ICON_RED_LIGHT.
      ENDIF.
*COLLECT GS_DISP2 INTO GT_DISP2. "merge
"PLANT, PUR.ORG, DELIV.DATA 디폴트 값
    PERFORM CALL_DEFAULT.
    APPEND GS_DISP2 TO GT_DISP2.
  ENDIF.
ENDLOOP.

*MERGE


ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form BAPI_PR_CREATE1
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM bapi_pr_create1 .

ENDFORM.
*&---------------------------------------------------------------------*
*& Form HANDLE_HOTSPOT_CLICK
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_ROW_ID
*&      --> E_COLUMN_ID
*&---------------------------------------------------------------------*
FORM handle_hotspot_click  USING    sender
                                    e_row_id    TYPE LVC_S_ROW
                                    e_column_id TYPE LVC_S_COL.

CASE SENDER.
  WHEN GO_GRID1.
   CLEAR GS_DISP1.
   READ TABLE GT_DISP1 INTO GS_DISP1 INDEX E_ROW_ID-index.
   SET PARAMETER ID 'AUN' FIELD GS_DISP1-vbeln.
   CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
  WHEN GO_GRID2.
    CLEAR GS_DISP2.
    READ TABLE GT_DISP2 INTO GS_DISP2 INDEX E_ROW_ID-INDEX.
    SET PARAMETER ID 'BAN' FIELD GS_DISP2-PRNUM.
    CALL TRANSACTION 'ME53N' AND SKIP FIRST SCREEN.
ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_SORT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_sort .

  CLEAR: GS_SORT, GT_SORT.

  GS_SORT-SPOS      = '1'.
  GS_SORT-FIELDNAME = 'VBELN'.
  GS_SORT-UP        = 'X'.
  APPEND GS_SORT TO GT_SORT.

  GS_SORT-SPOS      = '2'.
  GS_SORT-FIELDNAME = 'BANFN'.
  GS_SORT-UP        = 'X'.
  APPEND GS_SORT TO GT_SORT.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CHECK_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM check_data .

LOOP AT GT_DISP2 INTO GS_DISP2.

*PR생성할 줄을 선택하지 않았을 시(GT_ROWS로?)
IF GT_ROWS2 IS INITIAL.
  GS_DISP2-ICON  = ICON_LED_RED.
  GS_DISP2-MESGE = '자재를 선택해주세요.'.

*DELIV.DATE가 날짜 형식이 아닐 시

*필수필드(PLANT와 PUR.ORG)를 입력하지 않았을 시
ELSEIF GS_DISP2-werks IS INITIAL OR
       GS_DISP2-EKGRP IS INITIAL.
  GS_DISP2-ICON  = ICON_LED_RED.
  GS_DISP2-MESGE = 'PLANT와 Pur.org를 입력해주세요.'.

ENDIF.

MODIFY GT_DISP2 FROM GS_DISP2.
ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form CALL_MAT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM call_mat .


ENDFORM.
*&---------------------------------------------------------------------*
*& Form CALL_DEFAULT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM call_default .
  GS_DISP2-werks = '1010'.        "PLANT
  GS_DISP2-EKGRP = 'SGZ'.         "PUR.ORG
  GS_DISP2-badat = SY-DATUM + 7.  "현재 날짜로부터 일주일 후
  GS_DISP2-ICON  = ICON_LED_YELLOW.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form HANDLE_TOOLBAR
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_OBJECT
*&      --> E_INTERACTIVE
*&---------------------------------------------------------------------*
FORM handle_toolbar  USING    R_object TYPE REF TO CL_ALV_EVENT_TOOLBAR_SET
                              R_interactive.
DATA : ls_toolbar  TYPE stb_button.

    CLEAR ls_toolbar.
    MOVE 3                 TO ls_toolbar-butn_type.
    APPEND ls_toolbar      TO r_object->mt_toolbar.

    CLEAR ls_toolbar.

    MOVE 'DEL'            TO ls_toolbar-function. "INT에 APPEND
    MOVE icon_delete_row TO ls_toolbar-icon.
    MOVE '행삭제'          TO ls_toolbar-quickinfo.
    MOVE '행삭제'          TO ls_toolbar-text.
    MOVE ' '               TO ls_toolbar-disabled.
    APPEND ls_toolbar TO r_object->mt_toolbar.
*  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form HANDLE_USER_COMMAND
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_UCOMM
*&---------------------------------------------------------------------*
FORM handle_user_command  USING    R_ucomm.

DATA : lt_rows TYPE lvc_t_row,
         ls_rows LIKE LINE OF lt_rows.
  DATA: l_scroll TYPE lvc_s_stbl.


  CASE r_ucomm.
*    WHEN 'ADD'.
*      APPEND gs_tab TO gt_tab.

    WHEN 'DEL'.
      CALL METHOD GO_GRID2->get_selected_rows
        IMPORTING
          et_index_rows = lt_rows. "alv에서 선택된 라인이 it_rows에 들어간다.

      DESCRIBE TABLE lt_rows LINES sy-tfill.

      IF sy-tfill = 0.
        MESSAGE i000 WITH '항목을 선택하세요'.
        EXIT.
      ELSE.
        LOOP AT lt_rows INTO ls_rows.
          READ TABLE gt_DISP2 INTO GS_DISP2 INDEX ls_rows-index.
          gs_DISP2-MARK = 'X'.
          MODIFY GT_DISP2 FROM GS_DISP2 INDEX ls_rows-index TRANSPORTING MARK.
          MOVE-CORRESPONDING GS_DISP2 TO GS_DEL.
          APPEND gs_del TO gt_del.
        ENDLOOP.
        DELETE GT_DISP2 WHERE MARK = 'X'.
      ENDIF.
  ENDCASE.

*  l_scroll-row = 'X'.
*  l_scroll-col = 'X'.
*  CALL METHOD g_alv->refresh_table_display
*    EXPORTING
*      i_soft_refresh = ''
*      is_stable      = l_scroll.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form REFRESH_ALV1
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM refresh_alv1 .
  DATA : LS_STABLE TYPE LVC_S_STBL.

  LS_STABLE-ROW = 'X'.
  LS_STABLE-COL = 'X'.

  CALL METHOD GO_GRID1->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = LS_STABLE.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form BAPI_COMMIT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM bapi_commit .
    "성공처리
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
     EXPORTING
       WAIT = 'X'.
       LOOP AT GT_ROWS2 INTO GS_ROWS2.                             "PR생성하려고 선택한 ROWS들 LOOP문
        READ TABLE GT_DISP2 INTO GS_DISP2 INDEX gs_rows2-index.
         GS_DISP2-PRNUM = GV_PRNUM.                              "생성된 PR넘버
         GS_DISP2-ICON  = ICON_LED_GREEN.                        "성공 아이콘 처리
         GS_DISP2-MESGE = 'PR생성이 완료되었습니다.'.                  "성공 메시지 처리
        MODIFY GT_DISP2 FROM GS_DISP2 INDEX GS_ROWS2-INDEX.       "ALV에 띄우기
       ENDLOOP.

        LOOP AT GT_ROWS1 INTO GS_ROWS1.
        READ TABLE GT_DISP1 INTO GS_DISP1 INDEX GS_ROWS1-INDEX.
          IF SY-SUBRC = 0.
            GS_DISP1-BANFN = GV_PRNUM.                              "LV_PRNUM(PR번호) 왼쪽 ALV에
            MODIFY GT_DISP1 FROM GS_DISP1 INDEX GS_ROWS1-INDEX.
          ENDIF.
        ENDLOOP.
        PERFORM REFRESH_ALV1.
    MESSAGE S002 WITH GV_PRNUM. "&1 PR생성이 완료되었습니다.
ENDFORM.
