*&---------------------------------------------------------------------*
*& Include          Z21RSICSF01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form GET_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM GET_DATA .

  CLEAR GT_DATA.

* ------------------------------------------- 메인 테이블 SELECT ------------------------------------------- *

    SELECT  B~BANFN, B~BNFPO, B~MATNR,  B~LFDAT, M~PLIFZ, B~MENGE AS B_MENGE, SUM( K~MENGE ) AS K_MENGE, B~MEINS, B~EBELN, T~MAKTX
      INTO CORRESPONDING FIELDS OF TABLE @GT_DATA
      FROM  EBAN AS B LEFT JOIN EKPO AS K ON B~BANFN = K~BANFN  AND K~WERKS = @S_WERKS-LOW AND B~MATNR = K~MATNR
                      LEFT JOIN MARC AS M ON M~WERKS = @S_WERKS-LOW AND  B~MATNR = M~MATNR
                      LEFT JOIN MAKT AS T ON B~MATNR = T~MATNR
     WHERE B~MATNR IN @S_MATNR
       AND B~EKGRP IN @S_EKGRP
       AND B~BANFN IN @S_BANFN
       AND B~BADAT IN @S_BADAT
       AND B~LOEKZ = ''
  GROUP BY B~BANFN, B~BNFPO, B~MATNR,  B~LFDAT, M~PLIFZ, B~MEINS, B~EBELN, T~MAKTX, B~MENGE.

* ------------------------------------------- 벤더 테이블 SELECT ------------------------------------------- *

  SELECT E~MATNR E~FLIFN E~VDATU E~BDATU E~LIFNR E~NOTKZ L~NAME1
    INTO CORRESPONDING FIELDS OF TABLE GT_EORD
    FROM EORD AS E LEFT JOIN LFA1 AS L ON E~LIFNR = L~LIFNR
   WHERE MATNR IN S_MATNR.

* ------------------------------------------- 인포레코드 테이블 SELECT ------------------------------------------- *

  SELECT MATNR LIFNR INFNR
    INTO CORRESPONDING FIELDS OF TABLE GT_EINA
    FROM EINA
   WHERE MATNR IN S_MATNR.

" ------------------------------------------- (참고) 메인 테이블 SELECT & COLLECT ------------------------------------------- *

*    SELECT DISTINCT B~BNFPO, B~MATNR, B~BANFN,  B~LFDAT, M~PLIFZ, B~MENGE AS B_MENGE,
**         SUM( K~MENGE ) AS K_MENGE,
*         K~MENGE  AS K_MENGE,
*         B~MEINS, B~EBELN, T~MAKTX
*    INTO CORRESPONDING FIELDS OF TABLE @GT_DATA UP TO @P_HITS ROWS
*    FROM EBAN AS B LEFT JOIN EKPO AS K ON B~BANFN = K~BANFN AND K~WERKS = @P_WERKS AND B~MATNR = K~MATNR
*                   LEFT JOIN MARC AS M ON B~MATNR = M~MATNR AND M~WERKS = @P_WERKS
*                   LEFT JOIN MAKT AS T ON B~MATNR = T~MATNR
*   WHERE B~MATNR IN @S_MATNR
*     AND B~EKGRP EQ @P_EKGRP
*     AND B~BANFN IN @S_BANFN
*     AND B~LOEKZ = ''.
**   GROUP BY B~BANFN, B~BNFPO, B~MATNR, B~LFDAT, M~PLIFZ, B~MENGE, B~MEINS, B~EBELN, O~LIFNR.
*
**  DATA: BEGIN OF LT_DATA OCCURS 0,
**           BANFN TYPE BANFN,
**           CNT   TYPE P,
**           BNFPO TYPE BNFPO,
**           MATNR TYPE MATNR,
**           MENGE TYPE BSTMG,
**         END OF LT_DATA.
**
*  DATA: BEGIN OF LT_DATA2 OCCURS 0,
*           BANFN TYPE BANFN,
*           BNFPO TYPE BNFPO,
*           MATNR TYPE MATNR,
*           K_MENGE TYPE BSTMG,
*         END OF LT_DATA2.
*
*  LOOP AT GT_DATA INTO GS_DATA.
**    MOVE-CORRESPONDING GS_DATA TO LT_DATA.
**    LT_DATA-CNT = 1.
**    LT_DATA-MENGE = GS_DATA-K_MENGE.
**    COLLECT LT_DATA.
*
*    MOVE-CORRESPONDING GS_DATA TO LT_DATA2.
*    LT_DATA2-K_MENGE = GS_DATA-K_MENGE.
*    COLLECT LT_DATA2.
**    CLEAR: LT_DATA, GS_DATA.
*    CLEAR: LT_DATA2, GS_DATA.
*  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_OBJECT_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CREATE_OBJECT_0100 .

  CREATE OBJECT GO_CONTAINER_0100
    EXPORTING
      SIDE                        = CL_GUI_DOCKING_CONTAINER=>DOCK_AT_LEFT
      EXTENSION                   = CL_GUI_DOCKING_CONTAINER=>WS_MAXIMIZEBOX.

  CREATE OBJECT GO_GRID_0100
    EXPORTING
      I_PARENT = GO_CONTAINER_0100.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form INIT_FCAT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INIT_FCAT_0100 .
                                            "필드변수     "필드명      "KEY  "EDIT   "NOZERO   "참조테이블  "참조필드   "수량단위   "핫스팟  "OPT  "필드길이  "필드색
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'ICON'      '상태'        'X'   ''      ''        ''          ''        ''        ''      'A'   ''        ''.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'BANFN'     'PR 번호'     ''    ''      ''        ''          ''        ''        'X'     'A'   ''        'C110'.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'BNFPO'     'ITEM NO.'  ''    ''      ''        ''          ''        ''        ''      'A'   ''        'C110'.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'MATNR'     '자재 코드'     ''    ''      ''        ''          ''        ''        'X'     'A'   ''        ''.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'MAKTX'     '자재명'       ''    ''      ''        ''          ''        ''        ''      'A'   ''        ''.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'EBELN'     'PO 번호'     ''    ''      ''        ''          ''        ''        ''      'A'   ''        ''.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'B_MENGE'   'PR 수량'     ''    ''      ''        'EBAN'      'MENGE'   'MEINS'   ''      'A'   ''        ''.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'K_MENGE'   'PO 수량'     ''    ''      ''        'EKPO'      'MENGE'   'MEINS'   ''      'A'   ''        ''.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'REQTY'     '잔여 요청 수량'  ''    ''      ''        'EKPO'      'MENGE'  'MEINS'   ''       'A'   ''        ''.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'ORQTY'     '발주 수량'     ''    'X'     'X'       'EKPO'      'MENGE'   'MEINS'   ''      'A'   ''        'C300'.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'MEINS'     '수량 단위'     ''    ''      ''        'EKPO'      'MENGE'   ''        ''      'A'   ''        ''.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'LIFNR'     '공급자'       ''    'X'     ''        'EORD'      'LIFNR'   ''        'X'     'A'   ''        'C300'.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'NAME1'     '공급자명'      ''    ''      ''        'LFA1'      'NAME1'   ''        ''      'A'   ''        ''.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'PLIFZ'     '납품 소요 기간'  ''    ''      ''        ''          ''        ''        ''      'A'   ''        ''.
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'RESDT'     '납품 일자'     ''    'X'     ''        'EBAN'      'LFDAT'   ''        ''      'A'   ''        'C300' .
  PERFORM SET_FCAT_0100 USING GT_FCAT_0100  'MESSAGE'   '메시지'       ''    ''      ''        ''          ''        ''        ''      ''    '50'       ''.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_FCAT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GT_FCAT
*&      --> P_
*&---------------------------------------------------------------------*
FORM SET_FCAT_0100  USING    P_GT_FCAT LIKE GT_FCAT_0100
                        P_FIELDNAME
                        P_COLTEXT
                        P_KEY
                        P_EDIT
                        P_ZERO
                        P_REFTABLE
                        P_REFFIELD
                        P_QFIELDNAME
                        P_HOTSPOT
                        P_OPT
                        P_OUTPUTLEN
                        P_EMPHASIZE.

  CLEAR GS_FCAT_0100.
  GS_FCAT_0100-FIELDNAME  = P_FIELDNAME.
  GS_FCAT_0100-COLTEXT    = P_COLTEXT.
  GS_FCAT_0100-KEY        = P_KEY.
  GS_FCAT_0100-EDIT       = P_EDIT.
  GS_FCAT_0100-NO_ZERO    = P_ZERO.
  GS_FCAT_0100-REF_TABLE  = P_REFTABLE.
  GS_FCAT_0100-REF_FIELD  = P_REFFIELD.
  GS_FCAT_0100-QFIELDNAME = P_QFIELDNAME.
  GS_FCAT_0100-HOTSPOT    = P_HOTSPOT.
  GS_FCAT_0100-COL_OPT    = P_OPT.
  GS_FCAT_0100-OUTPUTLEN  = P_OUTPUTLEN.
  GS_FCAT_0100-EMPHASIZE  = P_EMPHASIZE.

  APPEND GS_FCAT_0100 TO P_GT_FCAT.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form INIT_LAYOUT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INIT_LAYOUT_0100 .

  CLEAR GS_LAYO_0100.

  GS_LAYO_0100-SEL_MODE   = 'D'.
  GS_LAYO_0100-ZEBRA      = 'X'.
  GS_LAYO_0100-INFO_FNAME = 'COLOR'.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_ALV_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM DISPLAY_ALV_0100 .

  CALL METHOD GO_GRID_0100->SET_TABLE_FOR_FIRST_DISPLAY
     EXPORTING
*      I_BUFFER_ACTIVE               =
*      I_BYPASSING_BUFFER            =
*      I_CONSISTENCY_CHECK           =
*      I_STRUCTURE_NAME              =
*      IS_VARIANT                    =
*      I_SAVE                        =
*      I_DEFAULT                     = 'X'
       IS_LAYOUT                     = GS_LAYO_0100
*      IS_PRINT                      =
*      GT_SPECIAL_GROUPS             =
       IT_TOOLBAR_EXCLUDING          = GT_EXCLUDE
*      IT_HYPERLINK                  =
*      IT_ALLV_GRAPHICS               =
*      IT_EXCEPT_QINFO               =
*      IR_SALLV_ADAPTER               =
    CHANGING
      IT_OUTTAB                     = GT_DATA
      IT_FIELDCATALOG               = GT_FCAT_0100
      IT_SORT                       = GT_SORT
*     IT_FILTER                     =
*    EXCEPTIONS
*      INVALID_PARAMETER_COMBINATION = 1
*      PROGRAM_ERROR                 = 2
*      TOO_MANY_LINES                = 3
*      others                        = 4
          .
  IF SY-SUBRC <> 0.
*   Implement suitable error handling here
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form BUILD_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM BUILD_DATA .

  DATA: LS_DATA LIKE GS_DATA.
  DATA: LV_HITNO TYPE I VALUE 1.

  PERFORM CALC_DELIVERY_DATE. "납품 일자 계산

  CLEAR GS_DATA.

* ------------------------------------------- 잔여 요청 수량 계산 ------------------------------------------- *

  LOOP AT GT_DATA INTO GS_DATA.   "요청 수량 계산 및 아이콘 DEFALUT SETTING

    GS_DATA-ICON  = ICON_LED_YELLOW.
    GS_DATA-REQTY = GS_DATA-B_MENGE - GS_DATA-K_MENGE.
    GS_DATA-ORQTY = GS_DATA-REQTY.

* ------------------------------------------- FIXED VENDOR DEFAULT SETTING ------------------------------------------- *

    LOOP AT GT_EORD INTO GS_EORD.

      IF GS_DATA-MATNR = GS_EORD-MATNR AND GS_EORD-FLIFN = 'X'.

        GS_DATA-LIFNR = GS_EORD-LIFNR.
        GS_DATA-NAME1 = GS_EORD-NAME1.

      ENDIF.

    ENDLOOP.

    MODIFY GT_DATA FROM GS_DATA.

  ENDLOOP.

* ------------------------------------------- 잔여 요청 수량 <= 0 제거 ------------------------------------------- *

  DELETE GT_DATA WHERE REQTY <= 0.

* ------------------------------------------- MAX NUMBER OF HITS 적용 ------------------------------------------- *

  SORT GT_DATA BY BANFN BNFPO.

  LOOP AT GT_DATA INTO GS_DATA.

    GS_DATA-HITNO = LV_HITNO.
    ADD 1 TO LV_HITNO.

    MODIFY GT_DATA FROM GS_DATA.
  ENDLOOP.

  DELETE GT_DATA WHERE HITNO > P_HITS.

* -------------------------------------------------------------------------------------------------------------- *

  PERFORM VALID_CHECK_ON_LOOKUP. "최초 ALV 구성 시 데이터 유효성 검증
ENDFORM.
*&---------------------------------------------------------------------*
*& Form POST_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM POST_DATA .

  DATA LV_CHECK TYPE CHAR01 VALUE '0'.
  DATA LV_INDEX TYPE I VALUE 1.

* ------------------------------------------- 데이터 변경 확인 ------------------------------------------- *

  CALL METHOD GO_GRID_0100->CHECK_CHANGED_DATA.

* ------------------------------------------- 선택된 ROW 이동 ------------------------------------------- *

  CLEAR GT_INDEX.
  CLEAR GT_SELECTED_DATA.
  CLEAR GT_VENDOR.

  CALL METHOD GO_GRID_0100->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = GT_INDEX.
*      ET_ROW_NO     =
      .

* ------------------------------------------- 선택된 ROW가 메인 ALV에서 몇 번째 INDEX인지 저장 ------------------------------------------- *

  LOOP AT GT_INDEX INTO GS_INDEX.

    READ TABLE GT_DATA INTO GS_DATA INDEX GS_INDEX-INDEX.

    APPEND GS_DATA TO GT_SELECTED_DATA.

    READ TABLE GT_SELECTED_DATA INTO GS_SELECTED_DATA INDEX LV_INDEX.
    GS_SELECTED_DATA-INDEX = GS_INDEX-INDEX.
    MODIFY GT_SELECTED_DATA FROM GS_SELECTED_DATA INDEX LV_INDEX.

    LV_INDEX = LV_INDEX + 1.

*    MODIFY GT_DATA FROM GS_DATA INDEX GS_INDEX-INDEX.
  ENDLOOP.

* ------------------------------------------- 선택된 ROW에 대한 유효성 검증 ------------------------------------------- *

  PERFORM VALID_CHECK USING GT_SELECTED_DATA.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form BAPI_PO_CREATE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM BAPI_PO_CREATE .

  DATA: LS_POHEADER     TYPE BAPIMEPOHEADER.
  DATA: LS_POHEADERX    TYPE BAPIMEPOHEADERX.
  DATA: LT_POITEM       TYPE TABLE OF BAPIMEPOITEM.
  DATA: LT_POITEMX      TYPE TABLE OF BAPIMEPOITEMX.
  DATA: LS_POITEM       LIKE LINE  OF LT_POITEM.
  DATA: LS_POITEMX      LIKE LINE  OF LT_POITEMX.
  DATA: LT_BAPIRET      TYPE TABLE OF BAPIRET2.
  DATA: LS_BAPIRET      LIKE LINE  OF LT_BAPIRET.
  DATA: LV_EBELN        TYPE EBELN.
  DATA: LV_PO_ITEM      TYPE I VALUE 10.
  DATA: LV_COUNT        TYPE I VALUE 0.
  DATA: LV_BAPIRET_ROW  TYPE I VALUE 1.

* ------------------------------------------- PO가 생성된 데이터가 메인 ALV에서 몇 번쨰 INDEX인지 누적할 변수 선언 ------------------------------------------- *

  DATA: BEGIN OF LS_RESULT,

    INDEX TYPE I,

  END OF LS_RESULT.

  DATA: LT_RESULT LIKE TABLE OF LS_RESULT.

* ------------------------------------------- 벤더 기준으로 소팅 ------------------------------------------- *

  SORT GT_SELECTED_DATA BY LIFNR BNFPO .

* ------------------------------------------- BAPI ------------------------------------------- *

  LOOP AT GT_VENDOR INTO GS_VENDOR.

    CLEAR LT_POITEM.
    CLEAR LT_POITEMX.

    CLEAR LT_RESULT.
    CLEAR LS_RESULT.

      ON CHANGE OF GS_VENDOR-LIFNR.

* ------------------------------------------- BAPI HEADER ------------------------------------------- *

*         EDIT HEADER
        CLEAR: LS_POHEADER.
        LS_POHEADER-COMP_CODE    = '1010'.
        LS_POHEADER-DOC_TYPE     = 'NB'.
        LS_POHEADER-VENDOR       = GS_VENDOR-LIFNR.
        LS_POHEADER-CREAT_DATE   = SY-DATUM.
        LS_POHEADER-PURCH_ORG    = '1010'.
        LS_POHEADER-PUR_GROUP    = 'SGZ'.
        LS_POHEADER-DOC_DATE     = SY-DATUM.

        CLEAR: LS_POHEADERX.
        LS_POHEADERX-COMP_CODE   = 'X'.
        LS_POHEADERX-DOC_TYPE    = 'X'.
        LS_POHEADERX-VENDOR      = 'X'.
        LS_POHEADERX-CREAT_DATE  = 'X'.
        LS_POHEADERX-PURCH_ORG   = 'X'.
        LS_POHEADERX-PUR_GROUP   = 'X'.
        LS_POHEADERX-DOC_DATE    = 'X'.


* ------------------------------------------- PO별 자재 누적 ------------------------------------------- *

      LOOP AT GT_SELECTED_DATA INTO GS_SELECTED_DATA.

        IF GS_VENDOR-LIFNR = GS_SELECTED_DATA-LIFNR.

*           EDIT ITEM
          CLEAR: LS_POITEM.
          LS_POITEM-PO_ITEM    = LV_PO_ITEM.
          LS_POITEM-PREQ_NO    = GS_SELECTED_DATA-BANFN.
          LS_POITEM-PREQ_ITEM  = GS_SELECTED_DATA-BNFPO.
          LS_POITEM-MATERIAL   = GS_SELECTED_DATA-MATNR.
          LS_POITEM-PLANT      = '1010'.
          LS_POITEM-TAX_CODE   = ''.
          LS_POITEM-QUANTITY   = GS_SELECTED_DATA-ORQTY.
          APPEND LS_POITEM TO LT_POITEM.

          CLEAR: LS_POITEMX.
          LS_POITEMX-PO_ITEM     = LV_PO_ITEM.
          LS_POITEMX-PO_ITEMX    = 'X'.
          LS_POITEMX-PREQ_NO     = 'X'.
          LS_POITEMX-PREQ_ITEM   = 'X'.
          LS_POITEMX-MATERIAL    = 'X'.
          LS_POITEMX-PLANT       = 'X'.
          LS_POITEMX-TAX_CODE    = 'X'.
          LS_POITEMX-QUANTITY    = 'X'.
          APPEND LS_POITEMX TO LT_POITEMX.

          LS_RESULT-INDEX = GS_SELECTED_DATA-INDEX.
          APPEND LS_RESULT TO LT_RESULT.
          LV_PO_ITEM = LV_PO_ITEM + 10.

        ENDIF.



      ENDLOOP.

    ENDON.

* ------------------------------------------- CALL BAPI ------------------------------------------- *

*     CALL BAPI
    CALL FUNCTION 'BAPI_PO_CREATE1'
      EXPORTING
        POHEADER         = LS_POHEADER
        POHEADERX        = LS_POHEADERX
*       TESTRUN          = 'X'
      IMPORTING
        EXPPURCHASEORDER = LV_EBELN
      TABLES
        RETURN           = LT_BAPIRET
        POITEM           = LT_POITEM
        POITEMX          = LT_POITEMX
*       POSCHEDULE       =
*       POSCHEDULEX      =
      .

* ------------------------------------------- 성공 시 ALV 변경 ------------------------------------------- *

    IF LV_EBELN IS NOT INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = 'X'.

      LOOP AT LT_RESULT INTO LS_RESULT.

        READ TABLE GT_DATA INTO GS_DATA INDEX LS_RESULT-INDEX." + LV_COUNT.
        GS_DATA-ICON = ICON_LED_GREEN.
        GS_DATA-EBELN = LV_EBELN.
        GS_DATA-K_MENGE = GS_DATA-K_MENGE + GS_DATA-ORQTY.
        GS_DATA-REQTY = GS_DATA-REQTY - GS_DATA-ORQTY.
        GS_DATA-MESSAGE = LV_EBELN.

        MODIFY GT_DATA FROM GS_DATA INDEX LS_RESULT-INDEX." + LV_COUNT.
        DELETE GT_SELECTED_DATA WHERE INDEX = LS_RESULT-INDEX.
      ENDLOOP.

* ------------------------------------------- 실패 시 ALV 변경 ------------------------------------------- *

    ELSE.

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*         IMPORTING
*           RETURN        =
                  .
      SORT LT_RESULT   BY INDEX.
      SORT LT_BAPIRET  BY ROW DESCENDING.

      READ TABLE LT_BAPIRET INTO LS_BAPIRET INDEX 1.
      LV_BAPIRET_ROW = LS_BAPIRET-ROW.

      LOOP AT LT_RESULT INTO LS_RESULT.

        READ TABLE GT_DATA INTO GS_DATA INDEX LS_RESULT-INDEX.
        GS_DATA-ICON = ICON_LED_RED.
        MODIFY GT_DATA FROM GS_DATA INDEX LS_RESULT-INDEX.

* ------------------------------------------- BAPIRET에서 불러온 에러메시지 ------------------------------------------- *

        LOOP AT LT_BAPIRET INTO LS_BAPIRET.

          IF LS_BAPIRET-TYPE = 'E' AND LS_BAPIRET-ID <> 'MEPO' AND LS_BAPIRET-ID <> 'BAPI' AND LS_BAPIRET-ROW = LV_BAPIRET_ROW.

            READ TABLE GT_SELECTED_DATA INTO GS_SELECTED_DATA INDEX LS_BAPIRET-ROW.
            READ TABLE GT_DATA INTO GS_DATA INDEX GS_SELECTED_DATA-INDEX.
            GS_DATA-MESSAGE = LS_BAPIRET-MESSAGE.
            EXIT.
          ENDIF.
        ENDLOOP.

        MODIFY GT_DATA FROM GS_DATA INDEX LS_RESULT-INDEX.
        ADD -1 TO LV_BAPIRET_ROW.
      ENDLOOP.

    ENDIF.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& FORM SET_EVENT_0100 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
FORM SET_EVENT_0100 .

  CREATE OBJECT GO_EVENT_RECEIVER.

  SET HANDLER GO_EVENT_RECEIVER->HANDLE_DATA_CHANGED FOR GO_GRID_0100.

  CALL METHOD GO_GRID_0100->REGISTER_EDIT_EVENT
    EXPORTING
      I_EVENT_ID = GO_GRID_0100->MC_EVT_MODIFIED.

  SET HANDLER GO_EVENT_RECEIVER->HANDLE_HOTSPOT_CLICK FOR GO_GRID_0100.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form HANDLE_DATA_CHANGED
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> ER_DATA_CHANGED
*&---------------------------------------------------------------------*
FORM HANDLE_DATA_CHANGED USING PO_DATA_CHANGED
                         TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

  DATA: LS_CELLS TYPE LVC_S_MODI,
        LT_CELLS TYPE LVC_T_MODI.

  LT_CELLS = PO_DATA_CHANGED->MT_GOOD_CELLS.


*  LOOP AT LT_CELLS INTO LS_CELLS.    "PO_DATA_CHANGED가 가지고 있는 INTERNAL TABLE MT_GOOD_CELLS
*
*    CALL METHOD PO_DATA_CHANGED->MODIFY_CELL
*      EXPORTING
*        I_ROW_ID    = LS_CELLS-ROW_ID
*        I_FIELDNAME = LS_CELLS-FIELDNAME
*        I_VALUE     = LS_CELLS-VALUE.
*  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CALC_DELIVERY_DATE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CALC_DELIVERY_DATE .

  DATA LV_PLNDT TYPE DATS.

  LOOP AT GT_DATA INTO GS_DATA.   "납품 일자 계산

    LV_PLNDT = SY-DATUM + GS_DATA-PLIFZ.

    IF GS_DATA-LFDAT < LV_PLNDT. "PR에서 설정한 DELIVERY DATE가 현재 날짜 + PLANNDED DELIVERY TIME보다 이른 경우 (시간이 모자란 경우)

      GS_DATA-RESDT = SY-DATUM + GS_DATA-PLIFZ.

    ELSEIF GS_DATA-LFDAT >= LV_PLNDT. "PR에서 설정한 DELIVERY DATE가 현재 날짜 + PLANNDED DELIVERY TIME보다 늦은 경우 (시간이 충분한 경우)

      GS_DATA-RESDT = GS_DATA-LFDAT.

    ENDIF.

    MODIFY GT_DATA FROM GS_DATA.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form HANDLE_HOTSPOT_CLICK
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_ROW_ID
*&      --> E_COLUMN_ID
*&---------------------------------------------------------------------*
FORM HANDLE_HOTSPOT_CLICK  USING    PS_ROW TYPE LVC_S_ROW
                                    PS_COL TYPE LVC_S_COL.

  CASE PS_COL-FIELDNAME.

* ------------------------------------------- 벤더 변경 ------------------------------------------- *

    WHEN 'LIFNR'.

      CLEAR GT_DATA2.

      GV_VENDOR_INPUT_ROW = PS_ROW-INDEX.
      READ TABLE GT_DATA INTO GS_DATA INDEX PS_ROW-INDEX.

      LOOP AT GT_EORD INTO GS_EORD.

        IF GS_DATA-MATNR = GS_EORD-MATNR.

          APPEND GS_EORD TO GT_DATA2.
        ENDIF.
      ENDLOOP.

      CALL SCREEN 200 STARTING AT 130 5.

* ------------------------------------------- PR 조회 ------------------------------------------- *

    WHEN 'BANFN'.

      CLEAR GS_DATA.
      READ TABLE GT_DATA INTO GS_DATA INDEX PS_ROW-INDEX.
      SET PARAMETER ID 'BAN' FIELD GS_DATA-BANFN.

      CALL TRANSACTION 'ME53N' AND SKIP FIRST SCREEN.

* ------------------------------------------- 자재 조회 ------------------------------------------- *

    WHEN 'MATNR'.

      CLEAR GS_DATA.
      READ TABLE GT_DATA INTO GS_DATA INDEX PS_ROW-INDEX.
      SET PARAMETER ID 'MAT' FIELD GS_DATA-MATNR.
      SET PARAMETER ID 'WRK' FIELD '1010'.  "PLANT
      SET PARAMETER ID 'LAG' FIELD '101A'.  "STORAGE LOCATION
      SET PARAMETER ID 'MXX' FIELD 'K'. "BASIC DATA1

      CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.

  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_OBJECT_0200
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CREATE_OBJECT_0200 .

  CREATE OBJECT GO_CONTAINER_0200
    EXPORTING
      CONTAINER_NAME              = 'GO_CONTAINER_0200'.

  CREATE OBJECT GO_GRID_0200
    EXPORTING
      I_PARENT = GO_CONTAINER_0200.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form INIT_FCAT_0200
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INIT_FCAT_0200 .
                                            "필드변수   "필드명      "KEY  "참조테이블   "참조필드
  PERFORM SET_FCAT_0200 USING GT_FCAT_0200  'MATNR'   '자재 코드'     'X'   'EORD'      'MATNR'.
  PERFORM SET_FCAT_0200 USING GT_FCAT_0200  'LIFNR'   '벤더'        'X'   'EORD'      'LIFNR'.
  PERFORM SET_FCAT_0200 USING GT_FCAT_0200  'FLIFN'   'FIXED'     ''     'EORD'     'FLIFN'.
  PERFORM SET_FCAT_0200 USING GT_FCAT_0200  'VDATU'   '유효 시작 일자' ''     'EORD'      'VDATU'.
  PERFORM SET_FCAT_0200 USING GT_FCAT_0200  'BDATU'   '유효 종료 일자' ''     'EORD'      'BDATU'.
  PERFORM SET_FCAT_0200 USING GT_FCAT_0200  'NOTKZ'   'BLOCKED'   ''     'EORD'      'NOTKZ'.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form INIT_LAYOUT_0200
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INIT_LAYOUT_0200 .

  CLEAR GS_LAYO_0200.

  GS_LAYO_0200-CWIDTH_OPT = 'A'.
  GS_LAYO_0200-ZEBRA      = 'X'.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_ALV_0200
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM DISPLAY_ALV_0200 .

  CALL METHOD GO_GRID_0200->SET_TABLE_FOR_FIRST_DISPLAY
     EXPORTING
*      I_BUFFER_ACTIVE               =
*      I_BYPASSING_BUFFER            =
*      I_CONSISTENCY_CHECK           =
*      I_STRUCTURE_NAME              =
*      IS_VARIANT                    =
*      I_SAVE                        =
*      I_DEFAULT                     = 'X'
       IS_LAYOUT                     = GS_LAYO_0200
*      IS_PRINT                      =
*      GT_SPECIAL_GROUPS             =
*      GT_TOOLBAR_EXCLUDING          =
*      GT_HYPERLINK                  =
*      GT_ALLV_GRAPHICS               =
*      GT_EXCEPT_QINFO               =
*      IR_SALLV_ADAPTER               =
    CHANGING
      IT_OUTTAB                     = GT_DATA2
      IT_FIELDCATALOG               = GT_FCAT_0200
*      GT_SORT                       =
*      GT_FILTER                     =
*    EXCEPTIONS
*      INVALID_PARAMETER_COMBINATION = 1
*      PROGRAM_ERROR                 = 2
*      TOO_MANY_LINES                = 3
*      others                        = 4
          .
  IF SY-SUBRC <> 0.
*   Implement suitable error handling here
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form VALID_CHECK
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GS_SELECTED_DATA
*&---------------------------------------------------------------------*
FORM VALID_CHECK  USING    PT_SELECTED_DATA LIKE GT_SELECTED_DATA.

  DATA LV_CHECK TYPE I VALUE 0.

* ------------------------------------------- 라인을 선택하지 않은 경우 ------------------------------------------- *

  IF PT_SELECTED_DATA IS INITIAL.

    MESSAGE S001 DISPLAY LIKE 'E'. "라인을 선택하세요.
  ENDIF.

* ------------------------------------------- 발주 수량을 입력하지 않은 경우 ------------------------------------------- *

  LOOP AT PT_SELECTED_DATA INTO GS_SELECTED_DATA.

    IF GS_SELECTED_DATA-ORQTY IS INITIAL.

      READ TABLE GT_DATA INTO GS_DATA INDEX GS_SELECTED_DATA-INDEX.
      GS_DATA-ICON = ICON_LED_RED.
      GS_DATA-MESSAGE = '발주 수량을 확인하세요'.

      MODIFY GT_DATA FROM GS_DATA INDEX GS_SELECTED_DATA-INDEX.
      LV_CHECK = 1.
    ENDIF.

* ------------------------------------------- 납풍 일자가 PLANNED DELIVERY TIME의 7할보다 이른 경우 ------------------------------------------- *

    IF GS_SELECTED_DATA-RESDT - SY-DATUM < GS_SELECTED_DATA-PLIFZ * 70 / 100. "납풍 일자가 PLANNED DELIVERY TIME의 7할보다 이른 경우

      READ TABLE GT_DATA INTO GS_DATA INDEX GS_SELECTED_DATA-INDEX.
      GS_DATA-ICON = ICON_LED_RED.
      GS_DATA-MESSAGE = '납품 일자가 너무 가깝습니다'.

      MODIFY GT_DATA FROM GS_DATA INDEX GS_SELECTED_DATA-INDEX.
      LV_CHECK = 2.
    ENDIF.

* ------------------------------------------- 공급자를 입력하지 않은 경우 ------------------------------------------- *

    IF GS_SELECTED_DATA-LIFNR IS INITIAL.

      READ TABLE GT_DATA INTO GS_DATA INDEX GS_SELECTED_DATA-INDEX.
      GS_DATA-ICON = ICON_LED_RED.
      GS_DATA-MESSAGE = '공급자를 선택하세요'.

      MODIFY GT_DATA FROM GS_DATA INDEX GS_SELECTED_DATA-INDEX.
      LV_CHECK = 3.
    ENDIF.
  ENDLOOP.

* ------------------------------------------- 오류가 없는 경우 ------------------------------------------- *

  IF LV_CHECK IS INITIAL.

    PERFORM GET_VENDOR_LIST.  "BAPI를 위한 벤더 리스트 생성
    PERFORM BAPI_PO_CREATE.   "BAPI
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_FCAT_0200
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> GT_FCAT_0200
*&      --> P_
*&      --> P_
*&      --> P_
*&      --> P_
*&      --> P_
*&      --> P_
*&      --> P_
*&      --> P_
*&      --> P_
*&      --> P_
*&---------------------------------------------------------------------*
FORM SET_FCAT_0200  USING    P_GT_FCAT LIKE GT_FCAT_0200
                        P_FIELDNAME
                        P_COLTEXT
                        P_KEY
                        P_REFTABLE
                        P_REFFIELD.


  CLEAR GS_FCAT_0200.
  GS_FCAT_0200-FIELDNAME  = P_FIELDNAME.
  GS_FCAT_0200-COLTEXT    = P_COLTEXT.
  GS_FCAT_0200-KEY        = P_KEY.
  GS_FCAT_0200-REF_TABLE  = P_REFTABLE.
  GS_FCAT_0200-REF_FIELD  = P_REFFIELD.

  APPEND GS_FCAT_0200 TO P_GT_FCAT.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form INPUT_VENDOR
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INPUT_VENDOR .

* ------------------------------------------- 선택한 라인 확인 ------------------------------------------- *

  CALL METHOD GO_GRID_0200->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = GT_INDEX2.
*      ET_ROW_NO     =

* ------------------------------------------- 선택한 라인의 데이터 메인 ALV에 입력 ------------------------------------------- *

  READ TABLE GT_INDEX2 INTO GS_INDEX2 INDEX 1.
  READ TABLE GT_DATA2  INTO GS_DATA2  INDEX GS_INDEX2-INDEX.

  GS_DATA-LIFNR = GS_DATA2-LIFNR.
  GS_DATA-NAME1 = GS_DATA2-NAME1.
  MODIFY GT_DATA FROM GS_DATA INDEX GV_VENDOR_INPUT_ROW.

* ------------------------------------------- 메인 ALV REFRESH ------------------------------------------- *

  PERFORM REFRESH_ALV_0100.

  LEAVE TO SCREEN 0.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form GET_VENDOR_LIST
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM GET_VENDOR_LIST .

  LOOP AT GT_DATA INTO GS_DATA.

    IF GS_DATA-LIFNR IS NOT INITIAL.

      APPEND GS_DATA-LIFNR TO GT_VENDOR.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SET_SORT_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM SET_SORT_0100 .

   GS_SORT-SPOS = '1'.
   GS_SORT-FIELDNAME = 'BANFN'.
   GS_SORT-UP = 'X'.

  APPEND GS_SORT TO GT_SORT.

   GS_SORT-SPOS = '2'.
   GS_SORT-FIELDNAME = 'BNFPO'.
   GS_SORT-UP = 'X'.

   APPEND GS_SORT TO GT_SORT.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form REFRESH_ALV_0100
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM REFRESH_ALV_0100 .

  DATA LS_STABLE TYPE LVC_S_STBL.

  LS_STABLE-ROW = 'X'.
  LS_STABLE-COL = 'X'.


    CALL METHOD GO_GRID_0100->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = LS_STABLE.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form VALID_CHECK_ON_LOOKUP
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM VALID_CHECK_ON_LOOKUP .


  LOOP AT GT_DATA INTO GS_DATA.

    READ TABLE GT_EORD INTO GS_EORD WITH KEY MATNR = GS_DATA-MATNR.

* ------------------------------------------- 소스리스트가 없는 경우 ------------------------------------------- *

    IF GS_EORD-LIFNR IS INITIAL OR GS_EORD-MATNR <> GS_DATA-MATNR.

      GS_DATA-ICON    = ICON_LED_RED.
      GS_DATA-MESSAGE = '해당 자재에 대한 소스리스트가 없습니다 '.

* ------------------------------------------- FIXED VENDOR가 없는 경우 ------------------------------------------- *

    ELSEIF GS_DATA-LIFNR IS INITIAL.

      GS_DATA-ICON    = ICON_LED_RED.
      GS_DATA-MESSAGE = '고정된 공급자가 없습니다 '.
    ENDIF.

* ------------------------------------------- INFO RECORD가 없는 경우 ------------------------------------------- *

    READ TABLE GT_EINA INTO GS_EINA WITH KEY MATNR = GS_DATA-MATNR.

    IF GS_EORD-LIFNR IS INITIAL OR GS_EORD-MATNR <> GS_DATA-MATNR.

      GS_DATA-ICON    = ICON_LED_RED.
      CONCATENATE GS_DATA-MESSAGE '해당 자재에 대한 인포레코드가 없습니다' INTO GS_DATA-MESSAGE SEPARATED BY ', '.
    ENDIF.

    MODIFY GT_DATA FROM GS_DATA.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form TOOLBAR_EXCLUDING
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM TOOLBAR_EXCLUDING .

  GS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
  APPEND GS_EXCLUDE TO GT_EXCLUDE.
  GS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
  APPEND GS_EXCLUDE TO GT_EXCLUDE.
  GS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
  APPEND GS_EXCLUDE TO GT_EXCLUDE.
  GS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
  APPEND GS_EXCLUDE TO GT_EXCLUDE.
  GS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW.
  APPEND GS_EXCLUDE TO GT_EXCLUDE.
  GS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
  APPEND GS_EXCLUDE TO GT_EXCLUDE.
  GS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
  APPEND GS_EXCLUDE TO GT_EXCLUDE.
  GS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
  APPEND GS_EXCLUDE TO GT_EXCLUDE.
  GS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
  APPEND GS_EXCLUDE TO GT_EXCLUDE.
  GS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
  APPEND GS_EXCLUDE TO GT_EXCLUDE.
ENDFORM.